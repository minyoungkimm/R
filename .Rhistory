node <- html_nodes(text, ".desc_review")
imsi <- html_text(node, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
if(length(review) == 10){
page <- data.frame(point, review)
movie.review <- rbind(movie.review, page)
}
i <- i +1
}
movie.review
write.csv(movie.review, "daummovie3.csv")
site <- "https://movie.daum.net/moviedb/grade?movieId=131576&type=netizen&page="
page <- NULL;movie.review <- NULL
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 영화평점
node <- html_nodes(text, ".raking_grade em")
point <- html_text(node)
if(is.null(point)){
break
}
# 영화리뷰
node <- html_nodes(text, ".desc_review")
imsi <- html_text(node, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
if(length(review) == 10){
page <- data.frame(point, review)
movie.review <- rbind(movie.review, page)
}
i <- i +1
}
movie.review
write.csv(movie.review, "daummovie3.csv")
site <- "https://movie.daum.net/moviedb/grade?movieId=131576&type=netizen&page="
page <- NULL;movie.review <- NULL
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 영화평점
node <- html_nodes(text, ".raking_grade em")
point <- html_text(node)
if(length(point) == 0){
break
}
# 영화리뷰
node <- html_nodes(text, ".desc_review")
imsi <- html_text(node, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
if(length(review) == 10){
page <- data.frame(point, review)
movie.review <- rbind(movie.review, page)
}
i <- i +1
}
movie.review
write.csv(movie.review, "daummovie3.csv")
url <- "http://media.daum.net/ranking/popular/"
text <- read_html(url)
text
# 뉴스제목
nodes <- html_nodes(text, ".cont_thumb strong a")
title <- html_text(nodes)
title
# 뉴스제목
nodes <- html_nodes(text, ".cont_thumb>strong>a")
title <- html_text(nodes)
title
# 뉴스제목
nodes <- html_nodes(text, ".cont_thumb>a")
title <- html_text(nodes)
title
# 뉴스제목
nodes <- html_nodes(text, ".rank_news>ul>li>.cont_thumb>strong>a")
title <- html_text(nodes)
title
# 신문사
nodes <- html_nodes(text, ".cont_thumb>strong>span")
name <- html_text(nodes)
name
page <- data.frame(title, name)
view(page)
library(view)
page
text <- NULL; title <- NULL; name <- NULL; page <- NULL
url <- "http://media.daum.net/ranking/popular/"
text <- read_html(url)
text
# 뉴스제목
nodes <- html_nodes(text, ".rank_news>ul>li>.cont_thumb>strong>a")
title <- html_text(nodes)
title
# 신문사
nodes <- html_nodes(text, ".cont_thumb>strong>span")
name <- html_text(nodes)
name
page <- data.frame(title, name)
view(page)
write.csv(page, "daumnews.csv")
text <- NULL; title <- NULL; name <- NULL; page <- NULL
url <- "http://media.daum.net/ranking/popular/"
text <- read_html(url)
text
# 뉴스제목
nodes <- html_nodes(text, ".rank_news>ul>li>.cont_thumb>strong>a")
title <- html_text(nodes)
title
# 신문사
nodes <- html_nodes(text, ".cont_thumb>strong>span")
name <- html_text(nodes)
name
page <- data.frame(title, name)
write.csv(page, "daumnews.csv")
text <- NULL; title <- NULL; name <- NULL; page <- NULL
url <- "http://media.daum.net/ranking/popular/"
text <- read_html(url)
text
# 뉴스제목
nodes <- html_nodes(text, ".rank_news>ul>li>.cont_thumb>strong>a")
newstitle <- html_text(nodes)
#newstitle
# 신문사
nodes <- html_nodes(text, ".cont_thumb>strong>span")
newspapername <- html_text(nodes)
#newpapername
page <- data.frame(newstitle, newspapername)
write.csv(page, "daumnews.csv")
url <- "https://comic.naver.com/genre/bestChallenge.nhn"
text <- NULL;
url <- "https://comic.naver.com/genre/bestChallenge.nhn"
text <- read_html(url)
text
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
title <- html_text(nodes)
title
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
text <- NULL;
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
for(i in 1:10){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
}
text <- NULL; comic.info <- NULL
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
for(i in 1:10){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
}
comic.info
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
check <- NULL
check <- c(check,comicName)
y <- table(check)
y
# 문제9
test2 <- scan("data/iotest2.txt",what="")
test2 <- factor(test2)
test2
table(test2)
which.max(table(test2))
which.max(table(test2)) == 6
which.max(table(test2)) > 5
if(which.max(table(test2)) > 5){
print('gjf')
}
which.max(y) > 1
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
check <- c(check,comicName)
y <- table(check)
which.max(y) > 1
text <- NULL; comic.info <- NULL; check <- NULL
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
check <- c(check,comicName)
y <- table(check)
if(which.max(y) > 1){
break
}
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
text <- NULL; comic.info <- NULL; check <- NULL
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
check <- c(check,comicName)
if(check[length(check)] == comicName[length(comicName)]){
break
}
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
comicName
check
check <- NULL;
text <- NULL; comic.info <- NULL; check <- NULL;
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
check <- c(check,comicName)
if(check[length(check)] == comicName[length(comicName)]){
break
}
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
check <- c(check,comicName)
check <- NULL;
check[length(check)] == comicName[length(comicName)]
comicName[length(comicName)]
check[length(check)]
check <- 1;
check[length(check)] == comicName[length(comicName)]
text <- NULL; comic.info <- NULL; check <- 1;
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
check <- c(check,comicName)
if(check[length(check)] == comicName[length(comicName)]){
break
}
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
text <- NULL;comicName <- NULL; comicSummary <- NULL;
comicGrade <- NULL;comic.info <- NULL; check <- 1;
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
check <- c(check,comicName)
if(check[length(check)] == comicName[length(comicName)]){
break
}
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
page
comic.info <- rbind(comic.info, page)
comic.info
text <- NULL;comicName <- NULL; comicSummary <- NULL;
comicGrade <- NULL;comic.info <- NULL; check <- NULL;
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
if(check[length(check)] == comicName[length(comicName)]){
break
}
check <- c(check,comicName)
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
text <- NULL;comicName <- NULL; comicSummary <- NULL;
comicGrade <- NULL;comic.info <- NULL; check <- 1;
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
if(check[length(check)] == comicName[length(comicName)]){
break
}
check <- c(check,comicName)
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
write.csv(comic.info, "navercomic.csv")
text <- NULL;comicName <- NULL; comicSummary <- NULL;
comicGrade <- NULL;comic.info <- NULL; check <- NULL;y <- NULL
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
#if(check[length(check)] == comicName[length(comicName)]){
#  break
#}
check <- c(check,comicName)
y <- table(check)
if(which.max(y) > 1){
break
}
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
text <- NULL;comicName <- NULL; comicSummary <- NULL;
comicGrade <- NULL;comic.info <- NULL; check <- 1;
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
if(check[length(check)] == comicName[length(comicName)]){
break
}
check <- c(check,comicName)
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
text <- NULL;comicName <- NULL; comicSummary <- NULL;
comicGrade <- NULL;comic.info <- NULL; check <- 1
site <- "https://comic.naver.com/genre/bestChallenge.nhn?&page="
i <- 1
while(TRUE){
url <- paste(site, i, sep="")
text <- read_html(url)
# 제목
nodes <- html_nodes(text, ".challengeInfo > h6 > a")
comicName <- html_text(nodes, trim=TRUE)
comicName
if(check[length(check)] == comicName[length(comicName)]){
break
}
check <- c(check,comicName)
# 내용요약
nodes <- html_nodes(text, ".summary")
comicSummary <- html_text(nodes, trim=TRUE)
comicSummary
# 평점
nodes <- html_nodes(text,".challengeInfo > .rating_type > strong")
comicGrade <- html_text(nodes)
comicGrade
page <- data.frame(comicName,comicSummary,comicGrade)
comic.info <- rbind(comic.info, page)
i <- i + 1
}
comic.info
