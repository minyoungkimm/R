if(substr(v,1,1)=="0"){
m <- substr(v,nchar(v),nchar(n))
}else{
m <- v
}
append(label,m)
}
for(v in labels){
if(substr(v,1,1)=="0"){
m <- substr(v,nchar(v),nchar(v))
}else{
m <- v
}
append(label,m)
}
label
for(v in labels[1:length(labels)]){
if(substr(v,1,1)=="0"){
m <- substr(v,nchar(v),nchar(v))
}else{
m <- v
}
append(label,m)
}
label
labels[1:length(labels)]
for(v in labels){
cat(v,"\n")
}
label <- NULL
for(v in labels){
if(substr(v,1,1)=="0"){
m <- substr(v,2,2)
}else{
m <- v
}
label <- c(label,m)
}
label
l_first <- NULL
for(v in labels){
if(substr(v,1,1)=="0"){
m <- substr(v,2,2)
}else{
m <- v
}
l_first <- c(l_first,m)
}
l_last <- as.character(as.numeric(l_first)+1)
png("clicklog2.png", 500, 500)
pie(table(hour), labels=paste(l_first,"~",l_last), cex=1,
main="파이그래프 실습", col=rainbow(19))
l_last <- as.character(as.numeric(l_first)+1)
pie(table(hour), labels=paste(l_first,"~",l_last), cex=1,
main="파이그래프 실습", col=rainbow(19))
l_last
labels <- names(table(hour))
l_first <- NULL
for(v in labels){
if(substr(v,1,1)=="0"){
m <- substr(v,2,2)
}else{
m <- v
}
l_first <- c(l_first,m)
}
l_last <- as.character(as.numeric(l_first)+1)
pie(table(hour), labels=paste(l_first,"~",l_last), cex=1,
main="파이그래프 실습", col=rainbow(19))
l_firs
l_first
l_last
pie(table(hour), labels=paste(l_first,"~",l_last), cex=1,
main="파이그래프 실습", col=rainbow(17))
dev.off()
pie(table(hour), labels=paste(l_first,"~",l_last), cex=1,
main="파이그래프 실습", col=rainbow(17))
# 문제2
par(mar=c(2,2,2,2), mfrow=c(1,1))
pie(table(hour), labels=paste(l_first,"~",l_last), cex=1,
main="파이그래프 실습", col=rainbow(17))
png("clicklog2.png", 500, 500)
pie(table(hour), labels=paste(l_first,"~",l_last), cex=1,
main="파이그래프 실습", col=rainbow(17))
dev.off()
# 문제3
score <- read.table("data/성적.txt", header=TRUE)
score
score2 <- score[,3:5]
boxplot(score2, col=rainbow(3), ylim=c(2,10), main="과목별 성적 분포",
family="maple",color.main="orange")
par(mar=c(2,2,2,2), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, col=rainbow(3), ylim=c(2,10), main="과목별 성적 분포",
family="maple",color.main="orange")
boxplot(score2, col=rainbow(3), ylim=c(2,10), main="과목별 성적 분포",
family="maple",col.main="orange")
boxplot(score2, col=rainbow(3), ylim=c(2,10),
family="maple")
title("다양하게 폰트를 지정한 박스플롯", family="maple", cex.main=2,col.main="orange")
title("다양하게 폰트를 지정한 박스플롯", family="maple", cex.main=1,col.main="orange")
par(mar=c(4,4,4,4), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, col=rainbow(3), ylim=c(2,10),
family="maple")
title("다양하게 폰트를 지정한 박스플롯", family="maple", cex.main=1,col.main="orange")
boxplot(score2, col=rainbow(3), ylim=c(2,10),
family="maple")
title("과목별 성적 분포", family="maple", cex.main=1,col.main="orange")
boxplot(score2, col=rainbow(3), ylim=c(2,10),
family="dog")
title("과목별 성적 분포", family="dog", cex.main=1,col.main="orange")
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
boxplot(score2, col=rainbow(3), ylim=c(2,10),
family="dog")
title("과목별 성적 분포", family="dog", cex.main=1,col.main="orange")
boxplot(score2, col=rainbow(3), ylim=c(2,10),
family="maple")
title("과목별 성적 분포", family="maple", cex.main=1.5,col.main="orange")
boxplot(score2, axes=F)
boxplot(score2, col=rainbow(3))
boxplot(data, axes=F)
boxplot(성적2, col=rainbow(3), ylim=c(0,10), ylab="성적")
data <- read.table("data/온도.txt", header=TRUE, sep=",")
head(data, n=5)
boxplot(data)
boxplot(data, las = 2)
boxplot(data, las = 2, at = c(1,2,3,4, 6,7,8,9, 11,12,13,14))
boxplot(data, las = 2)
boxplot(data, las = 2, at = c(1,2,3,4, 6,7,8,9, 11,12,13,14))
boxplot(data)
chtcols = rep(c("red","sienna","palevioletred1","royalblue2"), times=3)
chtcols
boxplot(data, las = 2, at = c(1,2,3,4, 6,7,8,9, 11,12,13,14), col=chtcols)
boxplot(data)
boxplot(data, las = 2)
boxplot(data)
boxplot(data, las = 2)
boxplot(score2, col=rainbow(3))
axis(1,  lab=names(score2), family="maple") # x축 추가
boxplot(score2, col=rainbow(3),family="maple")
score2 <- score[,3:5]
par(mar=c(4,4,4,4), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, col=rainbow(3),family="maple")
axis(2, at=2:10, family="dog")
boxplot(score2, col=rainbow(3),family="maple",main="과목별 성적 분포",cex.main=1.5,col.main="orange")
png("clicklog3.png", 400, 700)
par(mar=c(4,4,4,4), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, col=rainbow(3),family="maple",main="과목별 성적 분포",cex.main=1.5,col.main="orange")
dev.off()
png("clicklog3.png", 500, 600)
par(mar=c(4,4,4,4), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, col=rainbow(3),family="maple",main="과목별 성적 분포",cex.main=1.5,col.main="orange")
dev.off()
boxplot(score2, col=rainbow(3),main="과목별 성적 분포",cex.main=1.5,col.main="orange",family="maple")
boxplot(score2, col=rainbow(3),main="과목별 성적 분포",cex.main=1.5,col.main="orange",family="maple")
par(mar=c(4,4,4,4), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, col=rainbow(3),main="과목별 성적 분포",cex.main=1.5,col.main="orange",family="maple")
boxplot(data, axes=F)
axis(1, at=1:12, lab=names(data), family="maple") # x축 추가
boxplot(score2, axes=F)
axis(1, at=1:3, lab=names(score2), family="maple")
axis(2, at=seq(2,10),family="maple)"
axis(2, at=seq(2,10),family="maple")
axis(2, at=seq(2,10),family="maple")
box()
title("과목별 성적 분포", family="maple", cex.main=1.3)
boxplot(score2, axes=F)
axis(1, at=1:3, lab=names(score2), family="maple")
axis(2, at=seq(2,10),family="maple")
title("과목별 성적 분포", family="maple", cex.main=1.3,col="orange")
box()
title("과목별 성적 분포", family="maple", cex.main=1.3,col.main="orange")
par(mar=c(4,4,4,4), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, axes=F)
axis(1, at=1:3, lab=names(score2), family="maple")
axis(2, at=seq(2,10),family="maple")
title("과목별 성적 분포", family="maple", cex.main=1.3,col.main="orange")
box()
boxplot(score2, axes=F,col=rainbow(3))
axis(1, at=1:3, lab=names(score2), family="maple")
axis(2, at=seq(2,10),family="maple")
title("과목별 성적 분포", family="maple", cex.main=1.3,col.main="orange")
box()
png("clicklog3.png", 500, 600)
par(mar=c(4,4,4,4), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, axes=F,col=rainbow(3))
axis(1, at=1:3, lab=names(score2), family="maple")
axis(2, at=seq(2,10),family="maple")
title("과목별 성적 분포", family="maple", cex.main=1.3,col.main="orange")
box()
dev.off()
png("clicklog3.png", 500, 500)
par(mar=c(4,4,4,4), mfrow=c(1,1))
score2 <- score[,3:5]
boxplot(score2, axes=F,col=rainbow(3))
axis(1, at=1:3, lab=names(score2), family="maple")
axis(2, at=seq(2,10),family="maple")
title("과목별 성적 분포", family="maple", cex.main=1.3,col.main="orange")
box()
dev.off()
install.packages("dplyr")
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
str(ggplot2::mpg)
head(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
exam <- read.csv("data/csv_exam.csv")
str(exam)
dim(exam)
head(exam);tail(exam)
View(exam)
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1) # [참고] 단축키 [Ctrl+Shit+M]으로 %>% 기호 입력
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
# 3반이 아닌 경우
exam %>% filter(class != 3)
# 수학 점수가 50점을 초과한 경우
exam %>% filter(math > 50)
# 수학 점수가 50점 미만인 경우
exam %>% filter(math < 50)
# 영어점수가 80점 이상인 경우
exam %>% filter(english >= 80)
# 영어점수가 80점 이하인 경우
exam %>% filter(english <= 80)
# 추출한 행으로 데이터 만들기
class1 <- exam %>% filter(class == 1)  # class가 1인 행 추출, class1에 할당
class2 <- exam %>% filter(class == 2)  # class가 2인 행 추출, class2에 할당
mean(class1$math)                      # 1반 수학 점수 평균 구하기
mean(class2$math)                      # 2반 수학 점수 평균 구하기
exam %>% select(math)  # math 추출
exam %>% select(english)  # english 추출
# 여러 변수 추출하기
exam %>% select(class, math, english)  # class, math, english 변수 추출
# 변수 제외하기
exam %>% select(-math)  # math 제외
exam %>% select(-math, -english)  # math, english 제외
data(iris)
iris %>% pull(Species)
iris %>% select(Species)
iris %>% select_if(is.numeric)
iris %>% select(-Sepal.Length, -Petal.Length)
# Select column whose name starts with "Petal"
iris %>% select(starts_with("Petal"))
iris %>% select(starts_with("petal"))
iris %>% select(starts_with("Petal", ignore.case=T))
# Select column whose name ends with "Width"
iris %>% select(ends_with("Width"))
# Select columns whose names contains "etal"
iris %>% select(contains("etal"))
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
# 오름차순으로 정렬하기
exam %>% arrange(math)  # math 오름차순 정렬
# 내림차순으로 정렬하기
exam %>% arrange(desc(math))  # math 내림차순 정렬
# 정렬 기준 변수 여러개 지정
exam %>% arrange(desc(class), desc(math))  # class 및 math 오름차순 정렬
exam %>% arrange(desc(math)) %>% head(1)
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
head                                          # 일부 추출
#여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = (math + english + science)/3) %>%   # 총평균 변수 추가
head
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = total/3) %>%   # 총평균 변수 추가
head
# 문제1
# 1_1
library(ggplot2)
mpg <- as.data.frame(mpg)
str(mpg)
mpg %>% mutate(sum = cty+hwy)
# 1_3
mpg %>% arrange(desc(avg)) %>% head(3)
# 1_2
mpg %>% mutate(avg = sum / 2)
# 1_1
mpg %>% mutate(sum = cty+hwy)
# 1_2
mpg %>% mutate(avg = sum / 2)
# 1_2
mpg %>% mutate(avg = sum/2)
# 1_2
mpg %>% mutate(mean = sum/2)
str(mpg)
# 1_1
mpg %>% mutate(sum = cty+hwy)
# 1_2
mpg %>% mutate(mean = sum/2)
# 1_1
mpg %>% mutate(sum = cty+hwy,
mean = sum/2)
# 1_1
mpg %>% mutate(sum = cty+hwy) -> mpg
# 1_2
mpg %>% mutate(mean = sum/2)
# 1_2
mpg %>% mutate(mean = sum/2) -> mpg
# 1_3
mpg %>% arrange(desc(mean)) %>% head(3)
# 1_4
library(ggplot2)
mpg
mpg %>%
mutate(sum = cty + hwy, mean = sum / 2) %>%
arrange(desc(mean)) %>%
head(3)
mpg <- as.data.frame(mpg)
str(mpg)
mpg %>%
mutate(sum = cty + hwy, mean = sum / 2) %>%
arrange(desc(mean)) %>%
head(3)
# 문제2
mpg %>%
group_by(class) %>%                # class별로 분리
summarise(mean_cty = mean(cty))  # math 평균 산출
# 2_2
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
# 2_3
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(hwy)) %>%
arrange(desc(mean_cty)) %>%
head(3)
# 문제2
mpg <- as.data.frame(mpg)
# 2_1
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty))
# 2_2
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
# 2_3
mpg %>%
group_by(class) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_cty)) %>%
head(3)
# 2_3
mpg %>%
group_by(class) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
# 2_4
mpg %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer) %>%
filter(class == "compact")
# 2_4
mpg %>%
group_by(manufacturer) %>%
filter(class == "compact") %>%
summarise(n = n())
# 2_4
mpg %>%
group_by(manufacturer) %>%
filter(class == "compact") %>%
summarise(n = n()) %>%
arrange(desc(n))
emp <- dbReadTable(conn,'emp')
head(emp)
ifelse(emp$comm < 0,NA,emp$comm)
emp
emp$comm <- ifelse(emp$comm < 0,NA,emp$comm)
emp
# 문제1
emp %>% filter(jog == "MANAGER")
# 문제1
emp %>% filter(job == "MANAGER")
# 문제2
emp %>% select(empno,ename,sal)
source('C:/Rexam/9월24일/dplyr_lab1.R', encoding = 'UTF-8', echo=TRUE)
# 문제3
emp %>% select(-empno)
source('C:/Rexam/9월24일/dplyr_lab1.R', encoding = 'UTF-8', echo=TRUE)
# 문제4
emp %>% select(ename,sal)
# 문제5
emp %>%
group_by(job) %>%
summarise(n=n())
# 문제6
emp %>%
filter(sal >= 1000 && sal <= 3000) %>%
select(ename,sal,deptno)
emp
emp %>%
filter(sal >= 1000 && sal <= 3000)
emp
# 문제6
emp %>%
filter(sal >= 1000 & sal <= 3000) %>%
select(ename,sal,deptno)
source('C:/Rexam/9월24일/dplyr_lab1.R', encoding = 'UTF-8', echo=TRUE)
# 문제7
emp %>%
filter(job != "SALESMAN") %>%
select(ename,job,sal)
# 문제8
emp %>%
filter(job == "SALESMAN" & job == "ANALYST") %>%
select(ename,job)
# 문제8
emp %>%
filter(job == "SALESMAN" | job == "ANALYST") %>%
select(ename,job)
emp
# 문제9
emp %>%
group_by(deptno) %>%
amutate(sal_sum=sum(sal))
# 문제9
emp %>%
group_by(deptno) %>%
mutate(sal_sum=sum(sal))
# 문제9
emp %>%
group_by(deptno) %>%
summarise(sal_sum=sum(sal))
# 문제10
emp %>% arrange(sal)
# 문제11
emp %>% arrange(desc(sal)) %>% head(1)
# 문제12
empnew <- emp %>% rename("sal"="salary","comm"="commrate")
# 문제12
empnew <- emp %>% rename("salary"="sal","commrate"="comm")
empnew
# 문제13
emp %>%
group_by(deptno) %>%
summarise(n=n()) %>%
arrange(n) %>%
head(1)
emp %>%
group_by(deptno) %>%
summarise(n=n()) %>%
arrange(n)
# 문제13
emp %>%
group_by(deptno) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(1)
# 문제14
emp %>%
mutate(enamelength = nchar(ename)) %>%
arrange(enamelength)
# 문제14
emp %>%
mutate(enamelength = nchar(ename)) %>%
arrange(enamelength)
# 문제15
emp %>%
filter(if(!is.na(comm)))
emp
# 문제15
emp %>%
filter(comm != NA)
# 문제15
emp %>%
filter(!in.na(comm))
emp
# 문제15
emp %>%
filter(comm == "NA")
# 문제15
emp %>%
filter(comm != "NA")
# 문제15
emp %>%
filter(comm != "NA") %>%
summarise(n=n())
# 문제15
emp %>%
filter(comm != "NA") %>%
summarise(comm_count=n())
