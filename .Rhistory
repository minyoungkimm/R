emp %>%
group_by(deptno) %>%
amutate(sal_sum=sum(sal))
# 문제9
emp %>%
group_by(deptno) %>%
mutate(sal_sum=sum(sal))
# 문제9
emp %>%
group_by(deptno) %>%
summarise(sal_sum=sum(sal))
# 문제10
emp %>% arrange(sal)
# 문제11
emp %>% arrange(desc(sal)) %>% head(1)
# 문제12
empnew <- emp %>% rename("sal"="salary","comm"="commrate")
# 문제12
empnew <- emp %>% rename("salary"="sal","commrate"="comm")
empnew
# 문제13
emp %>%
group_by(deptno) %>%
summarise(n=n()) %>%
arrange(n) %>%
head(1)
emp %>%
group_by(deptno) %>%
summarise(n=n()) %>%
arrange(n)
# 문제13
emp %>%
group_by(deptno) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(1)
# 문제14
emp %>%
mutate(enamelength = nchar(ename)) %>%
arrange(enamelength)
# 문제14
emp %>%
mutate(enamelength = nchar(ename)) %>%
arrange(enamelength)
# 문제15
emp %>%
filter(if(!is.na(comm)))
emp
# 문제15
emp %>%
filter(comm != NA)
# 문제15
emp %>%
filter(!in.na(comm))
emp
# 문제15
emp %>%
filter(comm == "NA")
# 문제15
emp %>%
filter(comm != "NA")
# 문제15
emp %>%
filter(comm != "NA") %>%
summarise(n=n())
# 문제15
emp %>%
filter(comm != "NA") %>%
summarise(comm_count=n())
str(mpg)
#[ 문제 ]
#회사별로 "suv" 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하기
#절차	기능	dplyr 함수
#1	회사별로 분리	group_by()
#2	suv 추출	filter()
#3	통합 연비 변수 생성	mutate()
#4	통합 연비 평균 산출	summarise()
#5	내림차순 정렬	arrange()
#6	1~5위까지 출력	head()
library(ggplot2)
# 가로로 합치기
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5, 6),
midterm = c(60, 80, 70, 90, 85, 100))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 5, 3, 4, 2, 7),
final = c(70, 80, 65, 95, 83, 0))
# id 기준으로 합치기
total <- full_join(test1, test2, by = "id")  # id 기준으로 합쳐 total에 할당
library(dplyr)
# id 기준으로 합치기
total <- full_join(test1, test2, by = "id")  # id 기준으로 합쳐 total에 할당
total
# 다른 데이터 활용해 변수 추가하기
# 반별 담임교사 명단 생성
name <- data.frame(class = c(1, 2, 3, 4, 5), teacher = c("kim", "lee", "park", "choi", "jung"))
# class 기준 합치기
exam_new <- left_join(exam, name, by = "class")
# 세로로 합치기
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),  test = c(60, 80, 70, 90, 85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),  test = c(70, 83, 65, 95, 80))
#세로로 합치기
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
group_all
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
# 결측치 확인하기
is.na(df)         # 결측치 확인
table(is.na(df))  # 결측치 빈도 출력
# 변수별로 결측치 확인하기
table(is.na(df$sex))    # sex 결측치 빈도 출력
day_diff <- as.Date("2020/09/23") - as.Date("1996/02/07")
day_diff
# 문제5
d1 <- unclass(as.Date("2020-06-01"))
d1
as.Date("2020-06-01")
unclass(as.Date("2020-06-01"))
x1 <- seq(d1, d1 + 6)
x2 <- as.Date(x1,origin="1970-01-01")
format(x2,"%a-%m%d")
d1 <- as.Date("2020-06-01")
x2 <- as.Date(d1,origin="1970-01-01")
x1 <- seq(x1, x1 + 6)
d1 <- as.Date("2020-06-01")
x2 <- as.Date(d1,origin="1970-01-01")
x1 <- seq(x2, x2 + 6)
# 문제9
txt <- "Good Morning"
txt_v <- unlist(strsplit(x= txt, split= " "))
txt_l <- strsplit(txt_v," ")
txt_l
txt_v
# 문제10
kfpanda <-c("Yesterday is history, tommrrow is a mystery, today is a gift!",
"That's why we call it the present - from kung fu Panda")
kfpanda_sub <- gsub(",|-","",x10)
# 문제10
kfpanda <-c("Yesterday is history, tommrrow is a mystery, today is a gift!",
"That's why we call it the present - from kung fu Panda")
kfpanda_sub <- gsub(",|-","",kfpanda)
kfpanda_split <- unlist(strsplit(x = kfpanda_sub,split = " "))
kfpanda_split
kfpanda_sub <- gsub("\\s+","",kfpanda_sub) # 다중공백 제거
kfpanda_split <- unlist(strsplit(x = kfpanda_sub,split = " "))
kfpanda_split
# 문제10
kfpanda <-c("Yesterday is history, tommrrow is a mystery, today is a gift!",
"That's why we call it the present - from kung fu Panda")
kfpanda_sub <- gsub(",|-","",kfpanda)
kfpanda_sub <- gsub("\\s+"," ",kfpanda_sub) # 다중공백 제거
kfpanda_split <- unlist(strsplit(x = kfpanda_sub,split = " "))
kfpanda_split
# 문제11
ssn <- c("941215-1234567", "850605-2345678", "760830-1357913")
substr(ssn,nchar(ssn)-6,nchar(ssn)) <- "*******"
print(ssn)
list <- unlist(strsplit(x = ssn, split = "-"))
b_list <- list[seq(1,length(list),2)]
replace_ssn <- paste(b_list,"*******",sep="-")
replace_ssn
list <- unlist(strsplit(x = ssn, split = "-"))
list
# 문제11
ssn <- c("941215-1234567", "850605-2345678", "760830-1357913")
splitlist <- unlist(strsplit(x = ssn, split = "-"))
b_list <- splitlist[seq(1,length(list),2)]
replace_ssn <- paste(b_list,"*******",sep="-")
replace_ssn
# 문제13
emp %>%
group_by(deptno) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
head(1)
library(dplyr)
library(rJava)
library(RJDBC)
library(DBI)
drv <- JDBC(driverClass = 'org.mariadb.jdbc.Driver','mariadb-java-client-2.6.2.jar')
conn <- dbConnect(drv,'jdbc:mariadb://127.0.0.1:3306/work','scott','tiger')
emp <- dbReadTable(conn,'emp')
head(emp)
# 문제0
emp$comm <- ifelse(emp$comm < 0, NA, emp$comm)
# 문제1
emp %>% filter(job == "MANAGER")
# 문제2
emp %>% select(empno,ename,sal)
# 문제3
emp %>% select(-empno)
# 문제4
emp %>% select(ename,sal)
# 문제5
emp %>%
group_by(job) %>%
summarise(n=n())
# 문제6
emp %>%
filter(sal >= 1000 & sal <= 3000) %>%
select(ename,sal,deptno)
# 문제7
emp %>%
filter(job != "ANALYST") %>%
select(ename,job,sal)
# 문제8
emp %>%
filter(job == "SALESMAN" | job == "ANALYST") %>%
select(ename,job)
# 문제9
emp %>%
group_by(deptno) %>%
summarise(sal_sum=sum(sal))
# 문제10
emp %>% arrange(sal)
# 문제11
emp %>% arrange(desc(sal)) %>% head(1)
# 문제12
empnew <- emp %>% rename("salary"="sal","commrate"="comm")
# 문제13
emp %>%
group_by(deptno) %>%  #count(deptno)
summarise(n=n()) %>%  #arrange(n)
arrange(desc(n)) %>%  #tail(1)
head(1)
# 문제14
emp %>%
mutate(enamelength = nchar(ename)) %>%
arrange(enamelength) %>%
select(ename)
# 문제15
emp %>%
filter(!is.na(comm)) %>%
summarise(comm_count=n())
# 문제1
library(ggplot2)
mpg <- as.data.frame(mpg)
str(mpg)
# 문제1
library(ggplot2)
str(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
# 1-1
str(mpg)
# 1-2
dim(mpg)
# 1-3
head(mpg)
# 1-3
head(10)
# 1-3
mpg %>% head(10)
# 1-4
mpg %>% tail(10)
# 1-5
print(mpg)
# 1-6
summary(mpg)
# 1-7
mpg %>%
group_by(manufacturer) %>%
count
# 1-8
mpg %>%
group_by(manufacturer) %>%
group_by(model) %>%
count
# 1-8
mpg %>%
group_by(manufacturer) %>%
summarise(mf_n=n())
# 1-8
mpg %>%
group_by(manufacturer) %>%
summarise(mf_n=n()) -> mpg2
mpg2 %>%
group_by(model) %>%
summarise(model_n=n()) -> mpg2
mpg2
# 문제2
# 2-1
mpg %>% rename(city=cty,highway=hwy)
# 2-2
mpg[6,]
# 2-2
mpg[1:6,]
# 문제3
midwest
# 문제3
str(midwest)
dim(midwest)
midwest <- as.data.frame(ggplot2::midwest)
midwest
summary(midwest)
# 3-2
midwest %>% rename(total=poptotal,asian=popasian)
# 3-3
midwest %>% mutate(prob_asian=asian/total*100)
# 3-3
midwest %>% mutate(ratio_asian=asian/total,
prob_asian=ratio_asian*100)
# 3-2
midwest %>% rename(total=poptotal,asian=popasian)
# 3-2
midwest %>% rename(total=poptotal,asian=popasian) -> midwest
# 3-3
midwest %>% mutate(prob_asian = asian/total*100)
# 3-3
midwest %>% mutate(prob_asian = asian/total)
# 3-3
midwest %>% mutate(prob_asian = asian/total*100)
# 3-4
midwest %>%
summarise(mean_asian=mean(prob_asian))
midwest
# 3-3
midwest %>% mutate(prob_asian = asian/total*100) -> midwest
# 3-4
midwest %>%
summarise(mean_asian=mean(prob_asian))
# 3-4
midwest %>%
summarise(mean_asian=mean(prob_asian)) %>%
mutate(size_asian=ifelse(prob_asian > mean_asian,"large","small"))
# 3-4
midwest %>%
mutate(mean_asian=mean(prob_asian),
size_asian=ifelse(prob_asian > mean_asian,"large","small"))
mpg
# 문제4
# 4-1
mpg %>%
mutate(displ_class=ifelse(displ <= 4,"down4",ifelse(displ >= 5,"up5","4to5"))) %>%
group_by(displ_class) %>%
summarise(displ_mean=mean(displ_class))
# 문제4
# 4-1
mpg %>%
mutate(displ_class=ifelse(displ <= 4,"down4",ifelse(displ >= 5,"up5","4to5"))) %>%
group_by(displ_class) %>%
summarise(hwy_mean=mean(hwy))
# 4-2
mpg %>% filter(manufacturer=="audi"|manufacturer="toyota")
# 4-2
mpg %>% filter(manufacturer=="audi"|manufacturer=="toyota")
# 4-2
mpg %>%
filter(manufacturer=="audi"|manufacturer=="toyota") %>%
group_by(manufacturer) %>%
summarise(mean_city=mean(city))
# 4-2
mpg %>%
filter(manufacturer=="audi"|manufacturer=="toyota") %>%
group_by(manufacturer) %>%
summarise(mean_city=mean(cty))
# 4-3
mpg %>%
filter(manufacturer %in% c("chevrolet","ford","honda")) %>%
group_by(manufacturer) %>%
summarise(mean_hwy=mean(hwy))
# 문제5
mpg %>%
select(class,cty) -> mpg_sub
head(mpg_sub)
# 5-2
mpg %>%
filter(class %n% c("suv","compact")) %>%
group_by(class) %>%
summarise(mean_cty=mean(cty))
# 5-2
mpg %>%
filter(class %in% c("suv","compact")) %>%
group_by(class) %>%
summarise(mean_cty=mean(cty))
# 문제6
mpg %>%
filter(manufacturer = "audi") %>%
group_by(model) %>%
summarise(audi_hwy_mean=mean(hwy))
# 문제6
mpg %>%
filter(manufacturer == "audi") %>%
group_by(model) %>%
summarise(audi_hwy_mean=mean(hwy))
# 문제6
mpg %>%
filter(manufacturer == "audi")
# 문제6
mpg %>%
filter(manufacturer == "audi") %>%
group_by(model) %>%
summarise(audi_hwy_mean=mean(hwy))
mpg %>%
filter(manufacturer == "audi") %>%
group_by(model)
# 문제6
mpg
mpg <- as.data.frame(ggplot2::mpg)
# 문제6
mpg %>%
filter(manufacturer == "audi") %>%
group_by(model) %>%
summarise(audi_hwy_mean=mean(hwy))
# 문제6
mpg %>%
filter(manufacturer == "audi") %>%
arrange(hwy)
# 문제6
mpg %>%
filter(manufacturer == "audi") %>%
arrange(hwy) %>%
head(5)
# 문제6
mpg %>%
filter(manufacturer == "audi") %>%
arrange(desc(hwy)) %>%
head(5)
# 세로로 합치기
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),  test = c(60, 80, 70, 90, 85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),  test = c(70, 83, 65, 95, 80))
#세로로 합치기
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
df
# 결측치 확인하기
is.na(df)         # 결측치 확인
table(is.na(df))  # 결측치 빈도 출력
# 변수별로 결측치 확인하기
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
# 결측치 포함된 상태로 분석
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
# 결측치 있는 행 제거하기
library(dplyr) # dplyr 패키지 로드
df %>% filter(is.na(score))   # score가 NA인 데이터만 출력
df %>% filter(!is.na(score))  # score 결측치 제거
# 결측치 제외한 데이터로 분석하기
df_nomiss <- df %>% filter(!is.na(score))  # score 결측치 제거
mean(df_nomiss$score)                      # score 평균 산출
sum(df_nomiss$score)                       # score 합계 산출
# 여러 변수 동시에 결측치 없는 데이터 추출하기
# score, sex 결측치 제외
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
# 결측치가 하나라도 있으면 제거하기
df_nomiss2 <- na.omit(df)  # 모든 변수에 결측치 없는 데이터 추출
#분석에 필요한 데이터까지 손실 될 가능성 유의
# 함수의 결측치 제외 기능 이용하기 - na.rm = T
mean(df$score, na.rm = T)  # 결측치 제외하고 평균 산출
sum(df$score, na.rm = T)   # 결측치 제외하고 합계 산출
#summarise()에서 na.rm = T사용하기
# 결측치 생성
exam <- read.csv("data/csv_exam.csv")            # 데이터 불러오기
table(is.na(exam))
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15행의 math에 NA 할당
#평균 구하기
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))  # 결측치 제외하고 평균 산출
# 다른 함수들에 적용
exam %>% summarise(mean_math = mean(math, na.rm = T),      # 평균 산출
sum_math = sum(math, na.rm = T),        # 합계 산출
median_math = median(math, na.rm = T))  # 중앙값 산출
boxplot(exam$math)
boxplot(exam$math)
mean(exam$math, na.rm = T)  # 결측치 제외하고 math 평균 산출
# 평균으로 대체하기
exam$math <- ifelse(is.na(exam$math), 55, exam$math)  # math가 NA면 55로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
mean(exam$math)  # math 평균 산출
# 이상치 포함된 데이터 생성 - sex 3, score 6
outlier <- data.frame(sex = c(1, 2, 1, 3, 2, 1),  score = c(5, 4, 3, 4, 2, 6))
# 이상치 확인하기
table(outlier$sex)
# 이상치 포함된 데이터 생성 - sex 3, score 6
outlier <- data.frame(sex = c(1, 2, 1, 3, 2, 1),  score = c(5, 4, 3, 4, 2, 6))
# 이상치 확인하기
table(outlier$sex)
table(outlier$score)
# 결측 처리하기 - sex
# sex가 3이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
#결측 처리하기 - score
# sex가 1~5 아니면 NA 할당
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
# 결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
mpg <- as.data.frame(ggplot2::mpg)
View(mpg)
boxplot(mpg$hwy)
summary(mpg$hwy)
#상자그림 통계치 출력
boxplot(mpg$hwy)$stats  # 상자그림 통계치 출력
#상자그림 통계치 출력
boxplot(mpg$hwy)$stats  # 상자그림 통계치 출력
boxplot(mpg$hwy)
boxplot(mpg$hwy, range=2)
summary(mpg$hwy)
#상자그림 통계치 출력
boxplot(mpg$hwy)$stats  # 상자그림 통계치 출력
boxplot(mpg$hwy)
boxplot(mpg$hwy, range=2)
#상자그림 통계치 출력
boxplot(mpg$hwy)$stats  # 상자그림 통계치 출력
