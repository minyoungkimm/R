storeCss <- paste0("#mCSB_3_container > ul > li:nth-child(",index,")")
storePage <- remDr$findElements(using='css',storeCss)
if(length(storePage) == 0)
break
storeContent <- sapply(storePage,function(x){x$getElementText()})
#스타벅스 정보 추출
#strsplit(storeContent, split="\n")
storeList <- strsplit(unlist(storeContent), split="\n")
shopname <- storeList[[1]][1]
addr <- storeList[[1]][2]
addr <- gsub(",", "", addr)
telephone <- storeList[[1]][3]
#스타벅스 위도 경도 추출
lat <- sapply(storePage,function(x){x$getElementAttribute("data-lat")})
lng <- sapply(storePage,function(x){x$getElementAttribute("data-long")})
#병합
starbucks <- rbind(starbucks ,cbind(shopname, addr, telephone, lat, lng))
#스크롤 다운
if(index %% 3 == 0 && index != total)
remDr$executeScript("var dom=document.querySelectorAll('#mCSB_3_container > ul > li')[arguments[0]]; dom.scrollIntoView();", list(index))
}
write.csv(starbucks, "starbucks.csv")
install.packages("rjava")
install.packages("rJava")
install.packages("RJDBC")
install.packages("DBI")
library(rjava)
library(RJDB)
library(DBI)
library(rJava)
library(RJDBC)
library(DBI)
drv <- JDBC(driverClass = 'org.mariadb.jdbc.Driver','mariadb-java-client-2.6.2.jar')
conn <- dbConnect(drv,'jdbc:mariadb://127.0.0.1:3306/work','scott','tiger')
query <- "select * from goods"
goodsAll <- dbGetQuery(conn,query)
goddsAll
goodsAll
dbReadTable(conn,'goods')
query <- "select * from goods where su >= 3"
goodsAll <- dbGetQuery(conn,query)
goodsAll
query <- "select * form goods order by dan desc"
dbGetQuery(conn,query)
query <- "select * form goods order by dan desc"
dbGetQuery(conn,query)
goodsAll
query <- "select * from goods order by dan desc"
dbGetQuery(conn,query)
goodsAll
query <- "select * from goods order by dan desc"
dbGetQuery(conn,query)
goodsAll
query <- "select * from goods order by dan desc"
dbGetQuery(conn,query)
insert.db <- data.frame(code=5,name='식기 세척기',su=1,dan=250000)
dbWriteTable(conn,"goods",insert.db) # 이미 존재하는 데이블에 write할수는 없음(에러)
dbWriteTable(conn,"goods1",insert.db)
query <- "select * from goods1"
goodsAll <- dbGetQuery(conn,query)
goodsAll
dbReadTable(conn,'goods1')
# CSV파일 자료를 테이블에 저장하기
recode <- read.csv("C:/Rexam/data/recode.csv")
dbWriteTable(conn,'goods2',recode)
# 테이블 조회
query <- "select * from goods2"
goodsAll <- dbGetQuery(conn,query)
goodsAll
# 테이블에 레코드 추가
query <- "insert into goods2 values(6,'test',1,1000)"
dbSendUpdate(conn,query)
query <- "select * from goods2"
goodsAll <- dbGetQuery(conn,query)
goodsAll
# 테이블의 레코드 수정
query <- "update goods2 set name='테스트' where code = 6"
dbSendUpdate(conn,query)
query <- "select * from goods2"
goodsAll <- dbGetQuery(conn,query)
goodsAll
# 테이블의 레코드 삭제
delquery <- "delete from goods2 where code = 6"
dbSendUpdate(conn,delquery)
query <- "select * form goods2"
goodsAll <- dbGetQuery(conn,query)
query <- "select * from goods2"
goodsAll <- dbGetQuery(conn,query)
goodsAll
# 테이블 삭제
dbSendUpdate(conn,'drop table goods2')
dbWriteTable(conn,"book",data.frame(bookname=c("파이썬 정복","하둡 완벽 입문","R 프로그래밍"),
price=c(25000,25000,28000)))
dbGetQuery(conn, "SELECT * FROM book")
dbWriteTable(conn, "mtcars", mtcars[1:5, ])
dbReadTable(conn, "mtcars")
dbWriteTable(conn, "mtcars", mtcars[6:10, ], append = TRUE)
dbReadTable(conn, "mtcars")
dbWriteTable(conn, "mtcars", mtcars[1:2, ], overwrite = TRUE)
dbReadTable(conn, "mtcars")
head(cars)
str(cars)
dbWriteTable(conn,"cars",head(cars,3))
dbGetQuery(conn, "SELECT * FROM cars")
dbReadTable(conn, "cars")
dbGetQuery(conn, "SELECT * FROM cars")
# 데이터 수정
dbSendUpdate(conn,"INSERT INTO cars(speed, dist) VALUES(1,1)")
dbReadTable(conn, "cars")
dbSendUpdate(conn,"INSERT INTO cars(speed, dist) VALUES(2,2)")
dbReadTable(conn,"cars")
dbSendUpdate(conn,"UPDATE CARS SET DIST=DIST*100 WHERE SPEED =1")
dbReadTable(conn,"cars")
dbSendUpdate(conn,"UPDATE CARS SET DIST=DIST*3 WHERE SPEED =1")
dbReadTable(conn,"cars")
str(iris)
head(iris)
#(2)
names(iris) <- c("slength",'swidth','plength','pwidth','species')
head(iris)
#(3)
dbWriteTable(conn, "iris")
#(3)
dbWriteTable(conn, "iris",iris)
#(4)
iris_all <- dbGetQuery(conn, "select * from iris")
iris_all
#(5)
iris_setosa <- dbGetQuery(conn,"select * from iris where species == 'setosa'")
#(5)
iris_setosa <- dbGetQuery(conn,"select * from iris where species = 'setosa'")
irist_setosa
iris_setosa
#(6)
iris_versicolor <- dbGetQuery(conn,"select * from iris where species = 'versicolor'")
iris_versicolor
#(7)
iris_virginica <- dbGetQuery(conn,"select * from iris where species = 'virginica'")
iris_virginica
#(8)
productdf <- read.table("C:/Rexam/data/product_click.log")
productdf
names(productdf) <- c('clicktime,pid')
productdf
#(8)
productdf <- read.table("C:/Rexam/data/product_click.log")
names(productdf) <- c("clicktime","pid")
productdf
str(productdf)
#(9)
dbWriteTable(conn,'productlog',productdf)
productlog
# CSV파일 자료를 테이블에 저장하기
recode <- read.csv("C:/Rexam/data/recode.csv")
dbWriteTable(conn,'goods2',recode)
goods2
#(10)
p003 <- dbGetQuery(conn,"select * from productlog where id = 'p003'")
p003
#(10)
p003 <- dbGetQuery(conn,"select * from productlog where pid = 'p003'")
p003
#(11)
emp <- read.csv("C:/Rexam/data/emp.csv")
str(emp)
str(emp)
#(13)
dbWriteTable(conn,'emp',emp)
#(14)
result1 <- dbQuery(conn,"select * from emp order by dan desc")
#(14)
result1 <- dbGetQuery(conn,"select * from emp order by dan desc")
result1
str(emp)
#(14)
result1 <- dbGetQuery(conn,"select * from emp order by sal desc")
result1
result1
#(15)
result2 <- dbGetQuery(conn,"select * from emp order by hiredate acs")
#(15)
result2 <- dbGetQuery(conn,"select * from emp order by hiredate asc")
result2
#(16)
result3 <- dbGetQuery(conn,"select * from emp where sal >= 2000")
result3
#(17)
result4 <- dbGetQuery(conn,"select * from emp where 2000 <= sal <= 3000")
result4
#(17)
result4 <- dbGetQuery(conn,"select * from emp where sal >= 2000 and sal <= 3000")
result4
#(17)
result4 <- dbGetQuery(conn,"select * from emp where sal >= 2000 and sal < 3000")
result4
v <- sample(1,26,10)
v
v <- sample(1;26,10)
v
v <- sample(1:26,10)
v
alphabet <- LETTERS
alphabet
# 데이터 전처리(1) - apply 계열의 함수를 알아보자
weight <- c(65.4, 55, 380, 72.2, 51, NA)
height <- c(170, 155, NA, 173, 161, 166)
gender <- c("M", "F","M","M","F","F")
df <- data.frame(w=weight, h=height)
df
apply(df, 1, sum, na.rm=TRUE)
apply(df, 2, sum, na.rm=TRUE)
lapply(df, sum, na.rm=TRUE)
sapply(df, sum, na.rm=TRUE)
sapply(df, sum, na.rm=TRUE)
tapply(1:6, gender, sum, na.rm=TRUE)
tapply(df$w, gender, mean, na.rm=TRUE)
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
v<-c("abc", "DEF", "TwT")
sapply(v, function(d) paste("-",d,"-", sep=""))
l<-list("abc", "DEF", "TwT")
sapply(l, function(d) paste("-",d,"-", sep=""))
lapply(l, function(d) paste("-",d,"-", sep=""))
flower <- c("rose", "iris", "sunflower", "anemone", "tulip")
length(flower)
nchar(flower)
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d) if(nchar(d) > 5) d)
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return(NA))
sapply(flower, function(d) paste("-",d,"-", sep=""))
sapply(v, function(d) paste("-",d,"-", sep=""))
sapply(l, function(d) paste("-",d,"-", sep=""))
lapply(l, function(d) paste("-",d,"-", sep=""))
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d))
tapply(1:6, gender, base::sum, na.rm=TRUE)
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(r)
}
result <- sapply(df$w, myf)
length(result)
result
sapply(df$w, myf, F)
count <- 1
sapply(df, myf)
rr2 <- sapply(df, myf)
str(rr2)
rr2[1,1]
rr2[1,"w"]
v <- sample(1:26,10)
v
sapply(v,LETTERS[v])
sapply(v,function(d) return(LETTERS[d]))
v_alphabet <- sapply(v,function(d) return(LETTERS[d]))
v_alphabet
# 문제 2
memo <- read.table('C:/Rexam/data/memo.txt', sep='\t')
memo
# 문제 2
memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',encoding='UTF-8')
memo
# 문제 2
memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',file-encoding='UTF-8')
memo
# 문제 2
memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',fileEncoding = 'UTF-8')
memo
memo[1]
memo[1,]
memo[,2]
memo[2,]
# 문제 2
memo <- read.table('C:/Rexam/data/memo.txt',fileEncoding = 'UTF-8')
# 문제 2
#memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',fileEncoding = 'UTF-8')
memo <- readline('C:/Rexam/data/memo.txt')
# 문제 2
#memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',fileEncoding = 'UTF-8')
memo <- readline('C:/Rexam/data/memo.txt')
# 문제 2
#memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',fileEncoding = 'UTF-8')
memo <- readLines('C:/Rexam/data/memo.txt')
memo
# 문제 2
#memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',fileEncoding = 'UTF-8')
memo <- readLines('C:/Rexam/data/memo.txt',fileEncoding='UTF-8')
(today <- Sys.Date())
format(today, "%Y년 %m월 %d일%")
format(today, "%Y년 %m월 %d일")
format(today, "%d일 %B %Y년")
format(today, "%y")
format(today, "%Y")
format(today, "%B")
format(today, "%y")
format(today, "%Y")
format(today, "%B")
format(today, "%a")
format(today, "%A")
weekdays(today)
months(today)
quarters(today)
unclass(today)  # 1970-01-01을 기준으로 얼마나 날짜가 지났지는 지의 값을 가지고 있다.
Sys.Date()
Sys.time()
Sys.timezone()
# 문제 2
#memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',fileEncoding = 'UTF-8')
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1,]
memo[1]
class(memo)
# 문제 2
memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',fileEncoding = 'UTF-8')
class(memo)
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
is.vector(memo)
as.Date('1/15/2018',format='%m/%d/%Y') # format 은 생략 가능
as.Date('4월 26, 2018',format='%B %d, %Y')
as.Date('110228',format='%d%b%y')
as.Date('110228',format='%d%m%y')
format(today, "%B")
as.Date('11228',format='%d%b%y')
x1 <- "2019-01-10 13:30:41"
# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S")
# 문자열을 날짜+시간형으로
strptime(x1, "%Y-%m-%d %H:%M:%S")
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
x1 <- "2019-01-10 13:30:41"
# 문자열을 날짜+시간형으로
strptime(x1, "%Y-%m-%d %H:%M:%S")
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8",na.rm=TRUE)
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
# 문제 2
memo <- read.table('C:/Rexam/data/memo.txt', sep='\t',fileEncoding = 'UTF-8')
as.vector(memo)
memo <- as.vector(memo)
class(memo)
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1]
# 정규표현식 사용
word <- "JAVA javascript Aa 가나다 AAaAaA123 %^&*"
gsub("[[:punct:]]", "", word)
memo[1] <- gsub("[[:pucnt:]]","",memo[1])
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo
memo[2] <- toupper(memo[2])
memo
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[1])
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- toupper(memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo
memo[5] <- gsub("[^가-힣]","",memo[5])
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- toupper(memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo
memo[6] <- gsub("[[:space:]]","",memo[6])
memo
memo[7] <- gsub("[[:upper:]]","[[:lower:]]",memo[7])
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo[6] <- gsub("[[:space:]]","",memo[6])
memo[7] <- gsub("[[:upper:]]",,memo[7])
memo
memo[7] <- gsub("[[:upper:]]",tolower,memo[7])
memo[7] <- gsub("[[:upper:]]",tolower("[[:upper:]]"),memo[7])
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo[6] <- gsub("[[:space:]]","",memo[6])
# 정규표현식 사용
word <- "JAVA javascript Aa 가나다 AAaAaA123 %^&*"
gsub("\\d", "", word); gsub("\\D", "", word)
memo[7] <- gsub("[[:upper:]]","\\L",memo[7])
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo[6] <- gsub("[[:space:]]","",memo[6])
memo[7] <- gsub("[[:upper:]]","\\L\\1",memo[7])
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo[6] <- gsub("[[:space:]]","",memo[6])
memo[7] <- gsub("[[:upper:]]",perl=TRUE,"\\L\\1",memo[7])
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo[6] <- gsub("[[:space:]]","",memo[6])
memo
memo[7] <- gsub("[[:upper:]]",lower,memo[7])
memo[7] <- gsub("[[:upper:]]",perl=TRUE,"\\L\\1",memo[7])
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo[6] <- gsub("[[:space:]]","",memo[6])
memo[7] <- gsub("([[:upper:]])",perl=TRUE,"\\L\\1",memo[7])
memo
write(memo, file="memo_new.txt")
# 문제 2
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo
memo[5] <- gsub("[[:punct:][:digit:]^.]","",memo[5])
memo
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("([[:punct:][:digit:]],^.)","",memo[5])
memo
memo[5] <- gsub("([[:punct:][:digit:]]^.)","",memo[5])
memo
memo[5] <- gsub("[[:punct:][:digit:]]|^.","",memo[5])
memo
# 문제 2
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo
# 문제 2
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")[!is.null]
na.rm(memo)
memo[na.rm=TRUE]
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo[6] <- gsub("[[:space:]]","",memo[6])
memo[7] <- gsub("([[:upper:]])",perl=TRUE,"\\L\\1",memo[7])
na.omit(memo)
is.null(memo)
memo[is.null=T]
memo <- memo[1:7]
memo
write(memo, file="memo_new.txt")
memo <- readLines('C:/Rexam/data/memo.txt',encoding="UTF-8")
memo[1] <- gsub("[[:punct:]]","",memo[1])
memo[2] <- gsub("[e]","E",memo[2])
memo[3] <- gsub("[[:digit:]]","",memo[3])
memo[4] <- gsub("[[:lower:][:upper:]]","",memo[4])
memo[5] <- gsub("[[:punct:][:digit:]]","",memo[5])
memo[6] <- gsub("[[:space:]]","",memo[6])
memo[7] <- gsub("([[:upper:]])",perl=TRUE,"\\L\\1",memo[7])
memo <- memo[1:7]
write(memo, file="memo_new.txt")
